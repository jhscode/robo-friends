{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Header.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","i","components_Card","key","firstName","SearchBox","searchField","onSearchChange","type","placeholder","onChange","Header","react","components_SearchBox","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","event","target","value","axios","get","resp","data","students","_this$state","filterRobots","filter","toLowerCase","includes","length","components_Header","components_Scroll","components_ErrorBoundary","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a7dc834.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((robot, i) => {\n          return (\n            <Card \n              key={i} \n              id={robots[i].id} \n              name={robots[i].firstName} \n              email={robots[i].email}\n            />\n          );\n        })\n      }        \n    </div>    \n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, onSearchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <form>\n        <input \n          className=\"pa3 b b--green bg-lightest-blue\"\n          type=\"search\" \n          placeholder=\"search robots\" \n          onChange={onSearchChange}\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React, { Fragment } from 'react';\nimport SearchBox from './SearchBox';\n\nconst Header = ({ onSearchChange }) => {\n  return (\n    <Fragment>\n      <h1>Robo Friends Cards</h1>\n      <SearchBox onSearchChange={onSearchChange}/>\n    </Fragment>\n  );\n}\n\nexport default Header;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '3px solid black', height: '500px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  // making a class with the constructor as it is still valid to use.\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true});\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Ooops. We're checking out what's wrong!</h1>\n    }\n      return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport '../styles/App.css'\n\nimport 'tachyons';\n\nclass App extends Component {\n  state = {\n    robots: [],\n    searchField: ''\n  }\n\n  async componentDidMount() {\n    // use axios to make api call. changed componentdidmount to async await\n    const resp = await axios.get('https://www.hatchways.io/api/assessment/students');\n    // update state from the promise return and parsed by axios\n    this.setState({ robots: resp.data.students });\n  }\n\n  onSearchChange = (event) => {\n    this.setState ({\n      searchField: event.target.value\n    });\n\n  }\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filterRobots = robots.filter(robot => {\n      return robot.firstName.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return ( \n      !robots.length ? \n      <h1>Loading...</h1> :\n      (\n        <div className=\"tc\">\n          <Header onSearchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filterRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}